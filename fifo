#!/bin/bash
# FIX THIS ISSUES | NON-ACUTE
#shellcheck disable=SC1091,SC2001,SC2015,SC2153,SC2154,SC2155,SC2181,SC2207


: '¡ATENCIÓN!:
--------------------------------------------------------------
| Creado por helmuthdu <helmuthdu@gmail.com>                 |
| Modificado y Traducido por Juanii64 <juanii64@outlook.com> |
| Shell comprobado por uniminin <uniminin@zoho.com>          |
--------------------------------------------------------------
Este programa es software gratuito: puedes redistribuirlo y / o modificarlo
bajo los términos de la Licencia Pública General GNU publicada por
la Free Software Foundation, ya sea la versión 3 de la Licencia, o
(a su elección) cualquier versión posterior.

Este programa se distribuye con la esperanza de que sea útil,
pero SIN NINGUNA GARANTÍA; sin siquiera la garantía implícita de
COMERCIABILIDAD o APTITUD PARA UN PROPÓSITO PARTICULAR. Ver el
Licencia pública general GNU para obtener más detalles.

Debería haber recibido una copia de la Licencia Pública General GNU
junto con este programa. De lo contrario, consulte <http://www.gnu.org/licenses/>.
-------------------------------------------------- ----------------------
Ejecute este script después de su primer arranque con archlinux (como root)'


if [[ -f $(pwd)/sharedfuncs ]]; then
  source sharedfuncs
else
  echo "archivo faltante: sharedfuncs"
  exit 1
fi

#ARCHLINUX INSTALL SCRIPTS MODE {{{
#SELECCIONAR EL DISENO DEL TECLADO {{{
select_keymap() {
  print_title "KEYMAP - https://wiki.archlinux.org/index.php/KEYMAP"
  keymap_list=($(find /usr/share/kbd/keymaps/ -type f -printf "%f\n" | sort -V | sed 's/.map.gz//g'))
  PS3="$prompt1"
  print_info "La variable KEYMAP se especifica en el archivo /etc/rc.conf. Define qué mapa de teclas es el teclado en la terminal virtual. Los archivos de tabla de claves son proporcionados por el paquete kbd."
  echo "lista de mapas de teclas en /usr/share/kbd/keymaps"
  select KEYMAP in "${keymap_list[@]}"; do
    if contains_element "$KEYMAP" "${keymap_list[@]}"; then
      loadkeys "$KEYMAP"
      break
    else
      invalid_option
    fi
  done
}
#}}}
#DEFAULT EDITOR {{{
select_editor() {
  print_title "EDITOR POR DEFECTO"
  editors_list=("emacs" "nano" "vi" "vim" "neovim" "zile")
  PS3="$prompt1"
  echo -e "Selecciona el editor\n"
  select EDITOR in "${editors_list[@]}"; do
    if contains_element "$EDITOR" "${editors_list[@]}"; then
      package_install "$EDITOR"
      break
    else
      invalid_option
    fi
  done
}
#}}}
#MIRRORLIST {{{
configure_mirrorlist() {
  # Modified from: https://stackoverflow.com/a/24628676
  SAVEIFS=$IFS
  IFS=$'\n'
  #`reflector --list-countries | sed 's/[0-9]//g' | sed 's/\s*$//g' | sed -r 's/(.*) /\1./' | cut -d '.' -f 1 | sed 's/\s*$//g'`
  local countries_name=($((reflector --list-countries) | sed 's/[0-9]//g' | sed 's/\s*$//g' | sed -r 's/(.*) /\1./' | cut -d '.' -f 1 | sed 's/\s*$//g'))
  IFS=$SAVEIFS
  country_list() {
    PS3="$prompt1"
    echo "Selecciona tu pais:"
    select country_name in "${countries_name[@]}"; do
      if contains_element "$country_name" "${countries_name[@]}"; then
        break
      else
        invalid_option
      fi
    done
  }
  print_title "MIRRORLIST - https://wiki.archlinux.org/index.php/Mirrors"
  print_info "Esta opción es una guía para seleccionar y configurar sus espejos y una lista de los espejos disponibles actualmente."
  OPTION=n
  while [[ $OPTION != y ]]; do
    country_list
    read_input_text "Confirmar país: $country_name"
  done

  # Backup and replace current mirrorlist file.
  echo " Copia de seguridad de la lista de repositorios..."
  mv -i /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig
  
  # Get fastest mirrors of the country by Reflector.
  echo " Buscar espejos ubicados en $country_name..."
  reflector --country "$country_name" --sort rate --save /etc/pacman.d/mirrorlist

  # allow global read access (required for non-root yaourt execution)
  chmod +r /etc/pacman.d/mirrorlist
  
  # Final touches to mirrorlist by $EDITOR
  $EDITOR /etc/pacman.d/mirrorlist
}
#}}}
#UMOUNT PARTITIONS {{{
umount_partitions() {
  mounted_partitions=($(lsblk | grep "${MOUNTPOINT}" | awk '{print $7}' | sort -r))
  swapoff -a
  for i in "${mounted_partitions[@]}"; do
    umount "$i"
  done
}
#}}}
#SELECT DEVICE {{{
select_device() {
  devices_list=($(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd\|nvme\|mmcblk'))
  PS3="$prompt1"
  echo -e "Dispositivos conectados:\n"
  lsblk -lnp -I 2,3,8,9,22,34,56,57,58,65,66,67,68,69,70,71,72,91,128,129,130,131,132,133,134,135,259 | awk '{print $1,$4,$6,$7}' | column -t
  echo -e "\n"
  echo -e "Seleccionar el dispositivo para particionar:\n"
  select device in "${devices_list[@]}"; do
    if contains_element "${device}" "${devices_list[@]}"; then
      break
    else
      invalid_option
    fi
  done
  BOOT_MOUNTPOINT=$device
}
#}}}
#CREATE PARTITION SCHEME {{{
create_partition_scheme() {
  LUKS=0
  LVM=0
  print_title "https://wiki.archlinux.org/index.php/Partitioning"
  print_info "La partición de un disco duro permite dividir logicamente el espacio disponible en secciones a las que se puede acceder de forma independiente."
  print_warning "Maintain Current no funciona con LUKS"
  partition_layouts=("Default" "LVM" "LVM+LUKS" "Maintain Current")
  PS3="$prompt1"
  echo -e "Seleccionar esquema de particion:"
  select OPT in "${partition_layouts[@]}"; do
    partition_layout=$OPT
    case "$REPLY" in
    1)
      create_partition
      ;;
    2)
      create_partition
      setup_lvm
      ;;
    3)
      create_partition
      setup_luks
      setup_lvm
      ;;
    4)
      modprobe dm-mod
      vgscan &>/dev/null
      vgchange -ay &>/dev/null
      ;;
    *)
      invalid_option
      ;;
    esac
    [[ -n $OPT ]] && break
  done
}
#}}}
#SETUP PARTITION{{{
create_partition() {
  apps_list=("cfdisk" "cgdisk" "fdisk" "gdisk" "parted")
  PS3="$prompt1"
  echo -e "Seleccionar el programa de particionado:"
  select OPT in "${apps_list[@]}"; do
    if contains_element "$OPT" "${apps_list[@]}"; then
      select_device
      case $OPT in
      parted)
        parted -a opt "${device}"
        ;;
      *)
        $OPT "${device}"
        ;;
      esac
      break
    else
      invalid_option
    fi
  done
}
#}}}
#SETUP LUKS {{{
setup_luks() {
  print_title "LUKS - https://wiki.archlinux.org/index.php/LUKS"
  print_info "La configuración de clave unificada de Linux o LUKS es una especificación de cifrado de disco creada por Clemens Fruhwirth y originalmente pensada para Linux."
  print_danger "\tNo use esto para particiones de arranque"
  block_list=($(lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}'))
  PS3="$prompt1"
  echo -e "Seleccionar particion:"
  select OPT in "${block_list[@]}"; do
    if contains_element "$OPT" "${block_list[@]}"; then
      cryptsetup --cipher aes-xts-plain64 --key-size 512 --hash sha512 --iter-time 5000 --use-random --verify-passphrase luksFormat "$OPT"
      cryptsetup open --type luks "$([[ $TRIM -eq 1 ]] && echo '--allow-discards')" "$OPT" crypt
      LUKS=1
      LUKS_DISK=$(echo "${OPT}" | sed 's/\/dev\///')
      break
    elif [[ $OPT == "Cancel" ]]; then
      break
    else
      invalid_option
    fi
  done
}
#}}}
#SETUP LVM {{{
setup_lvm() {
  print_title "LVM - https://wiki.archlinux.org/index.php/LVM"
  print_info "LVM es un administrador de volumen lógico para el kernel de Linux; administra unidades de disco y dispositivos de almacenamiento masivo similares. "
  print_warning "La ultima particion ocupara el 100% del espacio libre restante"
  if [[ $LUKS -eq 1 ]]; then
    pvcreate /dev/mapper/crypt
    vgcreate lvm /dev/mapper/crypt
  else
    block_list=($(lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}'))
    PS3="$prompt1"
    echo -e "Seleccionar particion:"
    select OPT in "${block_list[@]}"; do
      if contains_element "$OPT" "${block_list[@]}"; then
        pvcreate "$OPT"
        vgcreate lvm "$OPT"
        break
      else
        invalid_option
      fi
    done
  fi
  printf "%s" "Ingrese el numero de particiones [ej: 2]: " 
  read -r number_partitions
  i=1
  while [[ $i -le $number_partitions ]]; do
    printf "%s" "Ingrese $iª nombre de la particion [ej: home]: " 
    read -r partition_name
    if [[ $i -eq $number_partitions ]]; then
      lvcreate -l 100%FREE lvm -n "${partition_name}"
    else
      printf "%s" "Ingrese $iª tamano de la particion [ej: 25G, 200M]: " 
      read -r partition_size
      lvcreate -L "${partition_size}" lvm -n "${partition_name}"
    fi
    i=$((i + 1))
  done
  LVM=1
}
#}}}
#SELECT|FORMAT PARTITIONS {{{
format_partitions() {
  print_title "https://wiki.archlinux.org/index.php/File_Systems"
  print_info "Este paso seleccionara y formateara la particion seleccionada donde se instalara archlinux"
  print_danger "\tTodos los datos de la particion ROOT y SWAP se PERDERAN."
  i=0

  block_list=($(lsblk | grep 'part\|lvm' | awk '{print substr($1,3)}'))

  # check if there is no partition
  if [[ ${#block_list[@]} -eq 0 ]]; then
    echo "No se encontro ninguna particion"
    exit 0
  fi

  partitions_list=()
  for OPT in "${block_list[@]}"; do
    check_lvm=$(echo "$OPT" | grep lvm)
    if [[ -z $check_lvm ]]; then
      partitions_list+=("/dev/$OPT")
    else
      partitions_list+=("/dev/mapper/$OPT")
    fi
  done

  # partitions based on boot system
  if [[ $UEFI -eq 1 ]]; then
    partition_name=("root" "EFI" "swap" "another")
  else
    partition_name=("root" "swap" "another")
  fi

  select_filesystem() {
    filesystems_list=("btrfs" "ext2" "ext3" "ext4" "f2fs" "jfs" "nilfs2" "ntfs" "reiserfs" "vfat" "xfs")
    PS3="$prompt1"
    echo -e "Seleccionar sistema de archivos:\n"
    select filesystem in "${filesystems_list[@]}"; do
      if contains_element "${filesystem}" "${filesystems_list[@]}"; then
        break
      else
        invalid_option
      fi
    done
  }

  disable_partition() {
    #remove the selected partition from list
    unset partitions_list["${partition_number}"]
    partitions_list=("${partitions_list[@]}")
    #increase i
    [[ ${partition_name[i]} != another ]] && i=$((i + 1))
  }

  format_partition() {
    read_input_text "Confirmar formato en la particion $1 "
    if [[ $OPTION == y ]]; then
      [[ -z $3 ]] && select_filesystem || filesystem=$3
      mkfs."${filesystem}" "$1" \
        $([[ ${filesystem} == xfs || ${filesystem} == btrfs || ${filesystem} == reiserfs ]] && echo "-f") \
        $([[ ${filesystem} == vfat ]] && echo "-F32") \
        $([[ $TRIM -eq 1 && ${filesystem} == ext4 ]] && echo "-E discard")
      fsck "$1"
      mkdir -p "$2"
      mount -t "${filesystem}" "$1" "$2"
      disable_partition
    fi
  }

  format_swap_partition() {
    read_input_text "Confirmar formato en la particion $1 "
    if [[ $OPTION == y ]]; then
      mkswap "$1"
      swapon "$1"
      disable_partition
    fi
  }

  create_swap() {
    swap_options=("partition" "file" "skip")
    PS3="$prompt1"
    echo -e "Selecciona el sistema de archivos ${BYellow}${partition_name[i]}${Reset}:\n"
    select OPT in "${swap_options[@]}"; do
      case "$REPLY" in
      1)
        select partition in "${partitions_list[@]}"; do
          #get the selected number - 1
          partition_number=$((REPLY - 1))
          if contains_element "${partition}" "${partitions_list[@]}"; then
            format_swap_partition "${partition}"
          fi
          break
        done
        swap_type="partition"
        break
        ;;
      2)
        total_memory=$(grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//')
        dd if=/dev/zero of="${MOUNTPOINT}"/swapfile bs=1M count="${total_memory}" status=progress
        chmod 600 "${MOUNTPOINT}"/swapfile
        mkswap "${MOUNTPOINT}"/swapfile
        swapon "${MOUNTPOINT}"/swapfile
        i=$((i + 1))
        swap_type="file"
        break
        ;;
      3)
        i=$((i + 1))
        swap_type="none"
        break
        ;;
      *)
        invalid_option
        ;;
      esac
    done
  }

  check_mountpoint() {
    if mount | grep "$2"; then
      echo "Montado con exito"
      disable_partition "$1"
    else
      echo "ADVERTENCIA: No montada con exito"
    fi
  }

  set_efi_partition() {
    efi_options=("/boot/efi" "/boot")
    PS3="$prompt1"
    echo -e "Seleccione el punto de montaje EFI:\n"
    select EFI_MOUNTPOINT in "${efi_options[@]}"; do
      if contains_element "${EFI_MOUNTPOINT}" "${efi_options[@]}"; then
        break
      else
        invalid_option
      fi
    done
  }

  while true; do
    PS3="$prompt1"
    if [[ ${partition_name[i]} == swap ]]; then
      create_swap
    else
      echo -e "Selecciona la particion ${BYellow}${partition_name[i]}${Reset} :\n"
      select partition in "${partitions_list[@]}"; do
        #get the selected number - 1
        partition_number=$((REPLY - 1))
        if contains_element "${partition}" "${partitions_list[@]}"; then
          case ${partition_name[i]} in
          root)
            ROOT_PART=$(echo "${partition}" | sed 's/\/dev\/mapper\///' | sed 's/\/dev\///')
            ROOT_MOUNTPOINT=${partition}
            format_partition "${partition}" "${MOUNTPOINT}"
            ;;
          EFI)
            set_efi_partition
            read_input_text "Formatear la particion ${partition} "
            if [[ $OPTION == y ]]; then
              format_partition "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}" vfat
            else
              mkdir -p "${MOUNTPOINT}${EFI_MOUNTPOINT}"
              mount -t vfat "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}"
              check_mountpoint "${partition}" "${MOUNTPOINT}${EFI_MOUNTPOINT}"
            fi
            ;;
          another)
            printf "%s" "Punto de montaje [ej: /home]:" 
            read -r directory
            [[ $directory == "/boot" ]] && BOOT_MOUNTPOINT=$(echo "${partition}" | sed 's/[0-9]//')
            select_filesystem
            read_input_text "Formatear la particion ${partition} "
            if [[ $OPTION == y ]]; then
              format_partition "${partition}" "${MOUNTPOINT}${directory}" "${filesystem}"
            else
              read_input_text "Confirmar sistema de archivos=""${filesystem}"" particion=""${partition}"" directorio=""${directory}"""
              if [[ $OPTION == y ]]; then
                mkdir -p "${MOUNTPOINT}${directory}"
                mount -t "${filesystem}" "${partition}" "${MOUNTPOINT}""${directory}"
                check_mountpoint "${partition}" "${MOUNTPOINT}${directory}"
              fi
            fi
            ;;
          esac
          break
        else
          invalid_option
        fi
      done
    fi
    #check if there is no partitions left
    if [[ ${#partitions_list[@]} -eq 0 && ${partition_name[i]} != swap ]]; then
      break
    elif [[ ${partition_name[i]} == another ]]; then
      read_input_text "Configurar mas particiones"
      [[ $OPTION != y ]] && break
    fi
  done
  pause_function
}
#}}}
#INSTALL BASE SYSTEM {{{
select_linux_version() {
  print_title "VERSION DE LINUX"
  version_list=("linux (default)" "linux-lts (long term support)" "linux-hardened (security features)" "linux-zen (tuned kernel)")
  PS3="$prompt1"
  echo -e "Seleccione la versión de Linux para instalar\n"
  select VERSION in "${version_list[@]}"; do
    if contains_element "$VERSION" "${version_list[@]}"; then
      if [ "linux (default)" == "$VERSION" ]; then
        pacstrap "${MOUNTPOINT}" base linux linux-headers
      elif [ "linux-lts (long term support)" == "$VERSION" ]; then
        pacstrap "${MOUNTPOINT}" base linux-lts linux-lts-headers
      elif [ "linux-hardened (security features)" == "$VERSION" ]; then
        pacstrap "${MOUNTPOINT}" base linux-hardened linux-hardened-headers
      elif [ "linux-zen (tuned kernel)" == "$VERSION" ]; then
        pacstrap "${MOUNTPOINT}" base linux-zen linux-zen-headers
      fi
      pacstrap "${MOUNTPOINT}" \
        cryptsetup lvm2 netctl dhcpcd inetutils jfsutils diffutils e2fsprogs \
        less linux-firmware logrotate man-db man-pages mdadm nano \
        perl reiserfsprogs s-nail sysfsutils texinfo usbutils vi which xfsprogs
      break
    else
      invalid_option
    fi
  done
}
install_base_system() {
  print_title "INSTALAR EL SISTEMA BASE"
  print_info "Instalando las llaves PGP"
  pacman -Sy archlinux-keyring
  print_info "Usando el script pacstrap instalamos el sistema base. El grupo de paquetes base-devel también se instalara."
  rm "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/vmlinuz-linux
  select_linux_version
  pacstrap "${MOUNTPOINT}" base-devel parted btrfs-progs f2fs-tools net-tools
  [[ $? -ne 0 ]] && error_msg "La instalación del sistema base para ${MOUNTPOINT} ha fallado. Verifique los mensajes de error anteriores."
  local PTABLE=$(parted -sl | grep "gpt")
  [[ -n $PTABLE ]] && pacstrap "${MOUNTPOINT}" gptfdisk
  WIRELESS_DEV=$(ip link | grep wl | awk '{print $2}' | sed 's/://' | sed '1!d')
  if [[ -n $WIRELESS_DEV ]]; then
    pacstrap "${MOUNTPOINT}" iw wireless_tools wpa_supplicant dialog
  else
    WIRED_DEV=$(ip link | grep "ens\|eno\|enp" | awk '{print $2}' | sed 's/://' | sed '1!d')
    if [[ -n $WIRED_DEV ]]; then
      arch_chroot "systemctl enable dhcpcd@${WIRED_DEV}.service"
    fi
  fi
  if is_package_installed "espeakup"; then
    pacstrap "${MOUNTPOINT}" alsa-utils espeakup brltty
    arch_chroot "systemctl enable espeakup.service"
  fi
}
#}}}
#CONFIGURE KEYMAP {{{
configure_keymap() {
  #ADD KEYMAP TO THE NEW SETUP
  echo "KEYMAP=$KEYMAP" >"${MOUNTPOINT}"/etc/vconsole.conf
  localectl set-x11-keymap $KEYMAP
}
#}}}
#CONFIGURE FSTAB {{{
configure_fstab() {
  print_title "FSTAB - https://wiki.archlinux.org/index.php/Fstab"
  print_info "El archivo contiene información fija del sistema de archivos /etc/fstab. Define como los dispositivos de almacenamiento y las particiones deben montarse e integrarse en el sistema general. El comando mount lo lee para determinar qué opciones usar al montar una particion o particion específica."
  if [[ ! -f ${MOUNTPOINT}/etc/fstab.aui ]]; then
    cp "${MOUNTPOINT}"/etc/fstab "${MOUNTPOINT}"/etc/fstab.aui
  else
    cp "${MOUNTPOINT}"/etc/fstab.aui "${MOUNTPOINT}"/etc/fstab
  fi
  if [[ $UEFI -eq 1 ]]; then
    fstab_list=("DEV" "PARTUUID" "LABEL")
  else
    fstab_list=("DEV" "UUID" "LABEL")
  fi

  PS3="$prompt1"
  echo -e "Configurar fstab basado en:"
  select OPT in "${fstab_list[@]}"; do
    case "$REPLY" in
    1) genfstab -p "${MOUNTPOINT}" >>"${MOUNTPOINT}"/etc/fstab ;;
    2)
      if [[ $UEFI -eq 1 ]]; then
        genfstab -t PARTUUID -p "${MOUNTPOINT}" >>"${MOUNTPOINT}"/etc/fstab
      else
        genfstab -U -p "${MOUNTPOINT}" >>"${MOUNTPOINT}"/etc/fstab
      fi
      ;;
    3) genfstab -L -p "${MOUNTPOINT}" >>"${MOUNTPOINT}"/etc/fstab ;;
    *) invalid_option ;;
    esac
    [[ -n $OPT ]] && break
  done
  fstab=$OPT
  echo "Revise su fstab"
  [[ -f ${MOUNTPOINT}/swapfile ]] && sed -i "s/\\${MOUNTPOINT}//" "${MOUNTPOINT}"/etc/fstab
  pause_function
  $EDITOR "${MOUNTPOINT}"/etc/fstab
}
#}}}
#CONFIGURE HOSTNAME {{{
configure_hostname() {
  print_title "HOSTNAME - https://wiki.archlinux.org/index.php/HOSTNAME"
  print_info "Un nombre de host es un nombre unico creado para identificar una maquina en una red. Los nombres de host están restringidos a caracteres alfanumericos.\nSe puede usar el guión (-), pero un nombre de host no puede comenzar ni terminar con el. La longitud esta restringida a 63 caracteres."
  printf "%s" "Hostname [ej: archlinux]: " 
  read -r host_name
  echo "$host_name" >"${MOUNTPOINT}"/etc/hostname
  if [[ ! -f ${MOUNTPOINT}/etc/hosts.aui ]]; then
    cp "${MOUNTPOINT}"/etc/hosts "${MOUNTPOINT}"/etc/hosts.aui
  else
    cp "${MOUNTPOINT}"/etc/hosts.aui "${MOUNTPOINT}"/etc/hosts
  fi
  arch_chroot "sed -i '/127.0.0.1/s/$/ '${host_name}'/' /etc/hosts"
  arch_chroot "sed -i '/::1/s/$/ '${host_name}'/' /etc/hosts"
}
#}}}
#CONFIGURE TIMEZONE {{{
configure_timezone() {
  print_title "TIMEZONE - https://wiki.archlinux.org/index.php/Timezone"
  print_info "En un sistema operativo, la hora (reloj) esta determinada por cuatro partes: valor de hora, estandar de hora, zona horaria y DST (horario de verano, si corresponde)."
  OPTION=n
  while [[ $OPTION != y ]]; do
    settimezone
    read_input_text "Confirmar zona horaria (${ZONE}/${SUBZONE})"
  done
  arch_chroot "ln -sf /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime"
  arch_chroot "sed -i '/#NTP=/d' /etc/systemd/timesyncd.conf"
  arch_chroot "sed -i 's/#Fallback//' /etc/systemd/timesyncd.conf"
  arch_chroot "echo \"FallbackNTP=0.pool.ntp.org 1.pool.ntp.org 0.fr.pool.ntp.org\" >> /etc/systemd/timesyncd.conf"
  arch_chroot "systemctl enable systemd-timesyncd.service"
}
#}}}
#CONFIGURE HARDWARECLOCK {{{
configure_hardwareclock() {
  print_title "HORA DEL RELOJ DE HARDWARE - https://wiki.archlinux.org/index.php/Internationalization"
  print_info "Esto se establece en /etc/adjtime. Configure el modo de reloj de hardware de manera uniforme entre sus sistemas operativos en la misma maquina. De lo contrario, sobrescribiran la hora y provocaran cambios de reloj (lo que puede provocar que la correccion de la deriva de tiempo se calibre mal)."
  hwclock_list=('UTC' 'Localtime')
  PS3="$prompt1"
  select OPT in "${hwclock_list[@]}"; do
    case "$REPLY" in
    1)
      arch_chroot "hwclock --systohc --utc"
      ;;
    2)
      arch_chroot "hwclock --systohc --localtime"
      ;;
    *) invalid_option ;;
    esac
    [[ -n $OPT ]] && break
  done
  hwclock=$OPT
}
#}}}
#CONFIGURE LOCALE {{{
configure_locale() {
  print_title "LOCALE - https://wiki.archlinux.org/index.php/Locale"
  print_info "Las configuraciones regionales se utilizan en Linux para definir qué idioma usa el usuario. Dado que las configuraciones regionales tambien definen los conjuntos de caracteres que se utilizan, configurar la configuracion regional correcta es especialmente importante si el idioma contiene caracteres que no son ASCII."
  OPTION=n
  while [[ $OPTION != y ]]; do
    setlocale
    read_input_text "Confirmar locale ($LOCALE)"
  done
  echo 'LANG="'"$LOCALE_UTF8"'"' >"${MOUNTPOINT}"/etc/locale.conf
  arch_chroot "sed -i 's/#\('${LOCALE_UTF8}'\)/\1/' /etc/locale.gen"
  arch_chroot "locale-gen"
}
#}}}
#CONFIGURE MKINITCPIO {{{
configure_mkinitcpio() {
  print_title "MKINITCPIO - https://wiki.archlinux.org/index.php/Mkinitcpio"
  print_info "mkinitcpio es un script Bash que se utiliza para crear un entorno de disco ram inicial."
  [[ $LUKS -eq 1 ]] && sed -i '/^HOOK/s/block/block keymap encrypt/' "${MOUNTPOINT}"/etc/mkinitcpio.conf
  [[ $LVM -eq 1 ]] && sed -i '/^HOOK/s/filesystems/lvm2 filesystems/' "${MOUNTPOINT}"/etc/mkinitcpio.conf
  $EDITOR "${MOUNTPOINT}"/etc/mkinitcpio.conf
  if [ "$(arch-chroot "${MOUNTPOINT}" ls /boot | grep hardened -c)" -gt "0" ]; then
    arch_chroot "mkinitcpio -p linux-hardened"
  elif [ "$(arch-chroot "${MOUNTPOINT}" ls /boot | grep lts -c)" -gt "0" ]; then
    arch_chroot "mkinitcpio -p linux-lts"
  elif [ "$(arch-chroot "${MOUNTPOINT}" ls /boot | grep zen -c)" -gt "0" ]; then
    arch_chroot "mkinitcpio -p linux-zen"
  else
    arch_chroot "mkinitcpio -p linux"
  fi
}
#}}}
#INSTALL BOOTLOADER {{{
install_bootloader() {
  print_title "BOOTLOADER - https://wiki.archlinux.org/index.php/Bootloader"
  print_info "El cargador de arranque es responsable de cargar el kernel y el disco RAM inicial antes de iniciar el proceso de arranque."
  print_warning "\tParticion ROOT: ${ROOT_MOUNTPOINT}"
  if [[ $UEFI -eq 1 ]]; then
    print_warning "\tModo UEFI Detectado"
    bootloaders_list=("Grub2" "Syslinux" "Systemd" "rEFInd" "Skip")
  else
    print_warning "\tModo BIOS Detectado"
    bootloaders_list=("Grub2" "Syslinux" "Skip")
  fi
  PS3="$prompt1"
  echo -e "Instalar el cargador de arranque:\n"
  select bootloader in "${bootloaders_list[@]}"; do
    case "$REPLY" in
    1)
      pacstrap "${MOUNTPOINT}" grub os-prober
      break
      ;;
    2)
      pacstrap "${MOUNTPOINT}" syslinux gptfdisk
      break
      ;;
    3)
      break
      ;;
    4)
      if [[ $UEFI -eq 1 ]]; then
        pacstrap "${MOUNTPOINT}" refind-efi os-prober
        break
      else
        invalid_option
      fi
      ;;
    5)
      [[ $UEFI -eq 1 ]] && break || invalid_option
      ;;
    *)
      invalid_option
      ;;
    esac
  done
  [[ $UEFI -eq 1 ]] && pacstrap "${MOUNTPOINT}" efibootmgr dosfstools
}
#}}}
#CONFIGURE BOOTLOADER {{{
configure_bootloader() {
  case $bootloader in
  Grub2)
    print_title "GRUB2 - https://wiki.archlinux.org/index.php/GRUB2"
    print_info "GRUB2 es la próxima generacion de GRand Unified Bootloader (GRUB).\nEn resumen, el gestor de arranque es el primer programa de software que se ejecuta cuando se inicia una computadora. Es responsable de cargar y transferir el control al kernel de Linux."
    grub_install_mode=("Automatic" "Manual")
    PS3="$prompt1"
    echo -e "Instalar GRUB:\n"
    select OPT in "${grub_install_mode[@]}"; do
      case "$REPLY" in
      1)
        if [[ $LUKS -eq 1 ]]; then
          sed -i -e 's/GRUB_CMDLINE_LINUX="\(.\+\)"/GRUB_CMDLINE_LINUX="\1 cryptdevice=\/dev\/'"${LUKS_DISK}"':crypt"/g' -e 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="cryptdevice=\/dev\/'"${LUKS_DISK}"':crypt"/g' "${MOUNTPOINT}"/etc/default/grub
        fi
        if [[ $UEFI -eq 1 ]]; then
          arch_chroot "grub-install --target=x86_64-efi --efi-directory=${EFI_MOUNTPOINT} --bootloader-id=arch_grub --recheck"
        else
          arch_chroot "grub-install --target=i386-pc --recheck --debug ${BOOT_MOUNTPOINT}"
        fi
        break
        ;;
      2)
        arch-chroot "${MOUNTPOINT}"
        break
        ;;
      *)
        invalid_option
        ;;
      esac
    done
    arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
    ;;
  Syslinux)
    print_title "SYSLINUX - https://wiki.archlinux.org/index.php/Syslinux"
    print_info "Syslinux es una coleccion de cargadores de arranque capaces de arrancar desde discos duros, CD y en la red a traves de PXE. Es compatible con los sistemas de archivos fat, ext2, ext3, ext4 y btrfs."
    syslinux_install_mode=("[MBR] Automatic" "[PARTITION] Automatic" "Manual")
    PS3="$prompt1"
    echo -e "Instalar Syslinux:\n"
    select OPT in "${syslinux_install_mode[@]}"; do
      case "$REPLY" in
      1)
        arch_chroot "syslinux-install_update -iam"
        if [[ $LUKS -eq 1 ]]; then
          sed -i "s/APPEND root=.*/APPEND root=\/dev\/mapper\/${ROOT_PART} cryptdevice=\/dev\/${LUKS_DISK}:crypt ro/g" "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/syslinux/syslinux.cfg
        elif [[ $LVM -eq 1 ]]; then
          sed -i "s/sda[0-9]/\/dev\/mapper\/${ROOT_PART}/g" "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/syslinux/syslinux.cfg
        else
          sed -i "s/sda[0-9]/${ROOT_PART}/g" "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/syslinux/syslinux.cfg
        fi
        print_warning "The partition in question needs to be whatever you have as / (root), not /boot."
        pause_function
        $EDITOR "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/syslinux/syslinux.cfg
        break
        ;;
      2)
        arch_chroot "syslinux-install_update -i"
        if [[ $LUKS -eq 1 ]]; then
          sed -i "s/APPEND root=.*/APPEND root=\/dev\/mapper\/${ROOT_PART} cryptdevice=\/dev\/${LUKS_DISK}:crypt ro/g" "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/syslinux/syslinux.cfg
        elif [[ $LVM -eq 1 ]]; then
          sed -i "s/sda[0-9]/\/dev\/mapper\/${ROOT_PART}/g" "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/syslinux/syslinux.cfg
        else
          sed -i "s/sda[0-9]/${ROOT_PART}/g" "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/syslinux/syslinux.cfg
        fi
        print_warning "The partition in question needs to be whatever you have as / (root), not /boot."
        pause_function
        $EDITOR "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/syslinux/syslinux.cfg
        break
        ;;
      3)
        print_info "Your boot partition, on which you plan to install Syslinux, must contain a FAT, ext2, ext3, ext4, or Btrfs file system. You should install it on a mounted directory, not a /dev/sdXY partition. You do not have to install it on the root directory of a file system, e.g., with partition /dev/sda1 mounted on /boot you can install Syslinux in the syslinux directory"
        echo -e "$prompt3"
        print_warning "mkdir /boot/syslinux\nextlinux --install /boot/syslinux "
        arch-chroot "${MOUNTPOINT}"
        break
        ;;
      *)
        invalid_option
        ;;
      esac
    done
    ;;
  Systemd)
    print_title "SYSTEMD-BOOT - https://wiki.archlinux.org/index.php/Systemd-boot"
    print_info "systemd-boot (anteriormente llamado gummiboot), es un administrador de arranque UEFI simple que ejecuta imágenes EFI configuradas. La entrada predeterminada se selecciona mediante un patron configurado (glob) o un menu en pantalla. Se incluye con systemd desde systemd 220-2."
    print_warning "\tSystemd-boot sugiere en gran medida que /boot este montado en la partición EFI, no en /boot/efi, para simplificar la actualizacion y la configuracion."
    gummiboot_install_mode=("Automatic" "Manual")
    PS3="$prompt1"
    echo -e "Instalar Gummiboot:\n"
    select OPT in "${gummiboot_install_mode[@]}"; do
      case "$REPLY" in
      1)
        arch_chroot "bootctl --path=${EFI_MOUNTPOINT} install"
        print_warning "Please check your .conf file"
        partuuid=$(blkid -s PARTUUID "${ROOT_MOUNTPOINT}" | awk '{print $2}' | sed 's/"//g' | sed 's/^.*=//')
        if [ "$(arch-chroot "${MOUNTPOINT}" ls /boot | grep hardened -c)" -gt "0" ]; then
          img_name="linux-hardened"
        elif [ "$(arch-chroot "${MOUNTPOINT}" ls /boot | grep lts -c)" -gt "0" ]; then
          img_name="linux-lts"
        elif [ "$(arch-chroot "${MOUNTPOINT}" ls /boot | grep zen -c)" -gt "0" ]; then
          img_name="linux-zen"
        else
          img_name="linux"
        fi
        if [[ $LUKS -eq 1 ]]; then
          echo -e "title\tArch Linux\nlinux\t/vmlinuz-${img_name}\ninitrd\t/initramfs-${img_name}.img\noptions\tcryptdevice=\/dev\/${LUKS_DISK}:luks root=\/dev\/mapper\/${ROOT_PART} rw" >"${MOUNTPOINT}""${EFI_MOUNTPOINT}"/loader/entries/arch.conf
        elif [[ $LVM -eq 1 ]]; then
          echo -e "title\tArch Linux\nlinux\t/vmlinuz-${img_name}\ninitrd\t/initramfs-${img_name}.img\noptions\troot=\/dev\/mapper\/${ROOT_PART} rw" >"${MOUNTPOINT}""${EFI_MOUNTPOINT}"/loader/entries/arch.conf
        else
          echo -e "title\tArch Linux\nlinux\t/vmlinuz-${img_name}\ninitrd\t/initramfs-${img_name}.img\noptions\troot=PARTUUID=${partuuid} rw" >"${MOUNTPOINT}""${EFI_MOUNTPOINT}"/loader/entries/arch.conf
        fi
        echo -e "default  arch\ntimeout  5" >"${MOUNTPOINT}""${EFI_MOUNTPOINT}"/loader/loader.conf
        pause_function
        $EDITOR "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/loader/entries/arch.conf
        $EDITOR "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/loader/loader.conf
        break
        ;;
      2)
        arch-chroot "${MOUNTPOINT}"
        break
        ;;
      *)
        invalid_option
        ;;
      esac
    done
    ;;
  rEFInd)
    print_title "REFIND - https://wiki.archlinux.org/index.php/REFInd"
    print_info "rEFInd es un administrador de arranque UEFI capaz de lanzar kernels EFISTUB. Es una bifurcacion del rEFIt que ya no se mantiene y soluciona muchos problemas con respecto al arranque UEFI que no es Mac. Está disenado para ser neutral en cuanto a plataforma y para simplificar el arranque de varios sistemas operativos."
    print_warning "Cuando refind-install (usado en modo automatico) se ejecuta en chroot (por ejemplo, en el sistema live al instalar Arch Linux) /boot/refind-linux.conf se llena con las opciones del kernel del sistema live, no en el que esta instalado. Necesita ajustar las opciones del kernel en /boot/refind-linux.conf manualmente."
    refind_install_mode=("Automatic" "Manual")
    PS3="$prompt1"
    echo -e "Instalar rEFInd:\n"
    select OPT in "${refind_install_mode[@]}"; do
      case "$REPLY" in
      1)
        arch_chroot "refind-install"
        $EDITOR "${MOUNTPOINT}""${EFI_MOUNTPOINT}"/refind_linux.conf
        break
        ;;
      2)
        arch-chroot "${MOUNTPOINT}"
        break
        ;;
      *)
        invalid_option
        ;;
      esac
    done
    ;;
  esac
  pause_function
}
#}}}
#ROOT PASSWORD {{{
root_password() {
  print_title "CONTRASENA ROOT"
  print_warning "Ingrese su nueva contrasena de root"
  arch_chroot "passwd"
  pause_function
}
#}}}
#FINISH {{{
finish() {
  print_title "INSTALACION COMPLETA"
  #COPY AUI TO ROOT FOLDER IN THE NEW SYSTEM
  print_warning "\nSe colocara una copia de la AUI en el directorio /root de su nuevo sistema"
  cp -R "$(pwd)" "${MOUNTPOINT}"/root
  read_input_text "Reiniciar el sistema"
  if [[ $OPTION == y ]]; then
    umount_partitions
    reboot
  fi
  exit 0
}
#}}}

pause_function
check_boot_system
check_connection
check_trim
pacman -Sy
while true; do
  print_title "ARCHLINUX ULTIMATE INSTALL ESP - https://github.com/juanii64/aui-master-esp"
  echo " 1) $(mainmenu_item "${checklist[1]}" "Seleccionar la distribucion de teclas" "${KEYMAP}")"
  echo " 2) $(mainmenu_item "${checklist[2]}" "Seleccionar el editor" "${EDITOR}")"
  echo " 3) $(mainmenu_item "${checklist[3]}" "Configurar los Repositorios" "${country_name} (${country_code})")"
  echo " 4) $(mainmenu_item "${checklist[4]}" "Esquema de particion" "${partition_layout}: ${partition}(${filesystem}) swap(${swap_type})")"
  echo " 5) $(mainmenu_item "${checklist[5]}" "Instalar el sistema base")"
  echo " 6) $(mainmenu_item "${checklist[6]}" "Configurar Fstab" "${fstab}")"
  echo " 7) $(mainmenu_item "${checklist[7]}" "Configurar el nombre de host" "${host_name}")"
  echo " 8) $(mainmenu_item "${checklist[8]}" "Configurar zona horaria" "${ZONE}/${SUBZONE}")"
  echo " 9) $(mainmenu_item "${checklist[9]}" "Configurar reloj de hardware" "${hwclock}")"
  echo "10) $(mainmenu_item "${checklist[10]}" "Configurar la configuracion regional" "${LOCALE}")"
  echo "11) $(mainmenu_item "${checklist[11]}" "Configurar Mkinitcpio")"
  echo "12) $(mainmenu_item "${checklist[12]}" "Instalar el cargador de arranque" "${bootloader}")"
  echo "13) $(mainmenu_item "${checklist[13]}" "Asignar Contrasena Root")"
  echo ""
  echo " t) Terminado"
  echo ""
  read_input_options
  for OPT in "${OPTIONS[@]}"; do
    case "$OPT" in
    1)
      select_keymap
      checklist[1]=1
      ;;
    2)
      select_editor
      checklist[2]=1
      ;;
    3)
      configure_mirrorlist
      checklist[3]=1
      ;;
    4)
      umount_partitions
      create_partition_scheme
      format_partitions
      checklist[4]=1
      ;;
    5)
      install_base_system
      configure_keymap
      checklist[5]=1
      ;;
    6)
      configure_fstab
      checklist[6]=1
      ;;
    7)
      configure_hostname
      checklist[7]=1
      ;;
    8)
      configure_timezone
      checklist[8]=1
      ;;
    9)
      configure_hardwareclock
      checklist[9]=1
      ;;
    10)
      configure_locale
      checklist[10]=1
      ;;
    11)
      configure_mkinitcpio
      checklist[11]=1
      ;;
    12)
      install_bootloader
      configure_bootloader
      checklist[12]=1
      ;;
    13)
      root_password
      checklist[13]=1
      ;;
    "t")
      finish
      ;;
    *)
      invalid_option
      ;;
    esac
  done
done
#}}}
